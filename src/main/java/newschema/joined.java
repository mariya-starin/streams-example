/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package newschema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class joined extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8930277866620278670L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"joined\",\"namespace\":\"newschema\",\"fields\":[{\"name\":\"registertime\",\"type\":\"long\"},{\"name\":\"regionid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gender\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transaction_id\",\"type\":\"long\"},{\"name\":\"card_id\",\"type\":\"long\"},{\"name\":\"user_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"purchase_id\",\"type\":\"long\"},{\"name\":\"store_id\",\"type\":\"int\"}],\"connect.name\":\"newschema.joined\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<joined> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<joined> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<joined> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<joined> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<joined> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this joined to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a joined from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a joined instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static joined fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long registertime;
  private java.lang.String regionid;
  private java.lang.String gender;
  private long transaction_id;
  private long card_id;
  private java.lang.String user_id;
  private long purchase_id;
  private int store_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public joined() {}

  /**
   * All-args constructor.
   * @param registertime The new value for registertime
   * @param regionid The new value for regionid
   * @param gender The new value for gender
   * @param transaction_id The new value for transaction_id
   * @param card_id The new value for card_id
   * @param user_id The new value for user_id
   * @param purchase_id The new value for purchase_id
   * @param store_id The new value for store_id
   */
  public joined(java.lang.Long registertime, java.lang.String regionid, java.lang.String gender, java.lang.Long transaction_id, java.lang.Long card_id, java.lang.String user_id, java.lang.Long purchase_id, java.lang.Integer store_id) {
    this.registertime = registertime;
    this.regionid = regionid;
    this.gender = gender;
    this.transaction_id = transaction_id;
    this.card_id = card_id;
    this.user_id = user_id;
    this.purchase_id = purchase_id;
    this.store_id = store_id;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return registertime;
    case 1: return regionid;
    case 2: return gender;
    case 3: return transaction_id;
    case 4: return card_id;
    case 5: return user_id;
    case 6: return purchase_id;
    case 7: return store_id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: registertime = (java.lang.Long)value$; break;
    case 1: regionid = value$ != null ? value$.toString() : null; break;
    case 2: gender = value$ != null ? value$.toString() : null; break;
    case 3: transaction_id = (java.lang.Long)value$; break;
    case 4: card_id = (java.lang.Long)value$; break;
    case 5: user_id = value$ != null ? value$.toString() : null; break;
    case 6: purchase_id = (java.lang.Long)value$; break;
    case 7: store_id = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'registertime' field.
   * @return The value of the 'registertime' field.
   */
  public long getRegistertime() {
    return registertime;
  }


  /**
   * Sets the value of the 'registertime' field.
   * @param value the value to set.
   */
  public void setRegistertime(long value) {
    this.registertime = value;
  }

  /**
   * Gets the value of the 'regionid' field.
   * @return The value of the 'regionid' field.
   */
  public java.lang.String getRegionid() {
    return regionid;
  }


  /**
   * Sets the value of the 'regionid' field.
   * @param value the value to set.
   */
  public void setRegionid(java.lang.String value) {
    this.regionid = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.String getGender() {
    return gender;
  }


  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.String value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'transaction_id' field.
   * @return The value of the 'transaction_id' field.
   */
  public long getTransactionId() {
    return transaction_id;
  }


  /**
   * Sets the value of the 'transaction_id' field.
   * @param value the value to set.
   */
  public void setTransactionId(long value) {
    this.transaction_id = value;
  }

  /**
   * Gets the value of the 'card_id' field.
   * @return The value of the 'card_id' field.
   */
  public long getCardId() {
    return card_id;
  }


  /**
   * Sets the value of the 'card_id' field.
   * @param value the value to set.
   */
  public void setCardId(long value) {
    this.card_id = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.String getUserId() {
    return user_id;
  }


  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'purchase_id' field.
   * @return The value of the 'purchase_id' field.
   */
  public long getPurchaseId() {
    return purchase_id;
  }


  /**
   * Sets the value of the 'purchase_id' field.
   * @param value the value to set.
   */
  public void setPurchaseId(long value) {
    this.purchase_id = value;
  }

  /**
   * Gets the value of the 'store_id' field.
   * @return The value of the 'store_id' field.
   */
  public int getStoreId() {
    return store_id;
  }


  /**
   * Sets the value of the 'store_id' field.
   * @param value the value to set.
   */
  public void setStoreId(int value) {
    this.store_id = value;
  }

  /**
   * Creates a new joined RecordBuilder.
   * @return A new joined RecordBuilder
   */
  public static newschema.joined.Builder newBuilder() {
    return new newschema.joined.Builder();
  }

  /**
   * Creates a new joined RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new joined RecordBuilder
   */
  public static newschema.joined.Builder newBuilder(newschema.joined.Builder other) {
    if (other == null) {
      return new newschema.joined.Builder();
    } else {
      return new newschema.joined.Builder(other);
    }
  }

  /**
   * Creates a new joined RecordBuilder by copying an existing joined instance.
   * @param other The existing instance to copy.
   * @return A new joined RecordBuilder
   */
  public static newschema.joined.Builder newBuilder(newschema.joined other) {
    if (other == null) {
      return new newschema.joined.Builder();
    } else {
      return new newschema.joined.Builder(other);
    }
  }

  /**
   * RecordBuilder for joined instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<joined>
    implements org.apache.avro.data.RecordBuilder<joined> {

    private long registertime;
    private java.lang.String regionid;
    private java.lang.String gender;
    private long transaction_id;
    private long card_id;
    private java.lang.String user_id;
    private long purchase_id;
    private int store_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(newschema.joined.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.registertime)) {
        this.registertime = data().deepCopy(fields()[0].schema(), other.registertime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.regionid)) {
        this.regionid = data().deepCopy(fields()[1].schema(), other.regionid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.gender)) {
        this.gender = data().deepCopy(fields()[2].schema(), other.gender);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[3].schema(), other.transaction_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.card_id)) {
        this.card_id = data().deepCopy(fields()[4].schema(), other.card_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.user_id)) {
        this.user_id = data().deepCopy(fields()[5].schema(), other.user_id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.purchase_id)) {
        this.purchase_id = data().deepCopy(fields()[6].schema(), other.purchase_id);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.store_id)) {
        this.store_id = data().deepCopy(fields()[7].schema(), other.store_id);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing joined instance
     * @param other The existing instance to copy.
     */
    private Builder(newschema.joined other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.registertime)) {
        this.registertime = data().deepCopy(fields()[0].schema(), other.registertime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.regionid)) {
        this.regionid = data().deepCopy(fields()[1].schema(), other.regionid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gender)) {
        this.gender = data().deepCopy(fields()[2].schema(), other.gender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[3].schema(), other.transaction_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.card_id)) {
        this.card_id = data().deepCopy(fields()[4].schema(), other.card_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.user_id)) {
        this.user_id = data().deepCopy(fields()[5].schema(), other.user_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.purchase_id)) {
        this.purchase_id = data().deepCopy(fields()[6].schema(), other.purchase_id);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.store_id)) {
        this.store_id = data().deepCopy(fields()[7].schema(), other.store_id);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'registertime' field.
      * @return The value.
      */
    public long getRegistertime() {
      return registertime;
    }


    /**
      * Sets the value of the 'registertime' field.
      * @param value The value of 'registertime'.
      * @return This builder.
      */
    public newschema.joined.Builder setRegistertime(long value) {
      validate(fields()[0], value);
      this.registertime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'registertime' field has been set.
      * @return True if the 'registertime' field has been set, false otherwise.
      */
    public boolean hasRegistertime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'registertime' field.
      * @return This builder.
      */
    public newschema.joined.Builder clearRegistertime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'regionid' field.
      * @return The value.
      */
    public java.lang.String getRegionid() {
      return regionid;
    }


    /**
      * Sets the value of the 'regionid' field.
      * @param value The value of 'regionid'.
      * @return This builder.
      */
    public newschema.joined.Builder setRegionid(java.lang.String value) {
      validate(fields()[1], value);
      this.regionid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'regionid' field has been set.
      * @return True if the 'regionid' field has been set, false otherwise.
      */
    public boolean hasRegionid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'regionid' field.
      * @return This builder.
      */
    public newschema.joined.Builder clearRegionid() {
      regionid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.String getGender() {
      return gender;
    }


    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public newschema.joined.Builder setGender(java.lang.String value) {
      validate(fields()[2], value);
      this.gender = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public newschema.joined.Builder clearGender() {
      gender = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_id' field.
      * @return The value.
      */
    public long getTransactionId() {
      return transaction_id;
    }


    /**
      * Sets the value of the 'transaction_id' field.
      * @param value The value of 'transaction_id'.
      * @return This builder.
      */
    public newschema.joined.Builder setTransactionId(long value) {
      validate(fields()[3], value);
      this.transaction_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_id' field has been set.
      * @return True if the 'transaction_id' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'transaction_id' field.
      * @return This builder.
      */
    public newschema.joined.Builder clearTransactionId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'card_id' field.
      * @return The value.
      */
    public long getCardId() {
      return card_id;
    }


    /**
      * Sets the value of the 'card_id' field.
      * @param value The value of 'card_id'.
      * @return This builder.
      */
    public newschema.joined.Builder setCardId(long value) {
      validate(fields()[4], value);
      this.card_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'card_id' field has been set.
      * @return True if the 'card_id' field has been set, false otherwise.
      */
    public boolean hasCardId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'card_id' field.
      * @return This builder.
      */
    public newschema.joined.Builder clearCardId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public newschema.joined.Builder setUserId(java.lang.String value) {
      validate(fields()[5], value);
      this.user_id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public newschema.joined.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchase_id' field.
      * @return The value.
      */
    public long getPurchaseId() {
      return purchase_id;
    }


    /**
      * Sets the value of the 'purchase_id' field.
      * @param value The value of 'purchase_id'.
      * @return This builder.
      */
    public newschema.joined.Builder setPurchaseId(long value) {
      validate(fields()[6], value);
      this.purchase_id = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'purchase_id' field has been set.
      * @return True if the 'purchase_id' field has been set, false otherwise.
      */
    public boolean hasPurchaseId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'purchase_id' field.
      * @return This builder.
      */
    public newschema.joined.Builder clearPurchaseId() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'store_id' field.
      * @return The value.
      */
    public int getStoreId() {
      return store_id;
    }


    /**
      * Sets the value of the 'store_id' field.
      * @param value The value of 'store_id'.
      * @return This builder.
      */
    public newschema.joined.Builder setStoreId(int value) {
      validate(fields()[7], value);
      this.store_id = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'store_id' field has been set.
      * @return True if the 'store_id' field has been set, false otherwise.
      */
    public boolean hasStoreId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'store_id' field.
      * @return This builder.
      */
    public newschema.joined.Builder clearStoreId() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public joined build() {
      try {
        joined record = new joined();
        record.registertime = fieldSetFlags()[0] ? this.registertime : (java.lang.Long) defaultValue(fields()[0]);
        record.regionid = fieldSetFlags()[1] ? this.regionid : (java.lang.String) defaultValue(fields()[1]);
        record.gender = fieldSetFlags()[2] ? this.gender : (java.lang.String) defaultValue(fields()[2]);
        record.transaction_id = fieldSetFlags()[3] ? this.transaction_id : (java.lang.Long) defaultValue(fields()[3]);
        record.card_id = fieldSetFlags()[4] ? this.card_id : (java.lang.Long) defaultValue(fields()[4]);
        record.user_id = fieldSetFlags()[5] ? this.user_id : (java.lang.String) defaultValue(fields()[5]);
        record.purchase_id = fieldSetFlags()[6] ? this.purchase_id : (java.lang.Long) defaultValue(fields()[6]);
        record.store_id = fieldSetFlags()[7] ? this.store_id : (java.lang.Integer) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<joined>
    WRITER$ = (org.apache.avro.io.DatumWriter<joined>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<joined>
    READER$ = (org.apache.avro.io.DatumReader<joined>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.registertime);

    out.writeString(this.regionid);

    out.writeString(this.gender);

    out.writeLong(this.transaction_id);

    out.writeLong(this.card_id);

    out.writeString(this.user_id);

    out.writeLong(this.purchase_id);

    out.writeInt(this.store_id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.registertime = in.readLong();

      this.regionid = in.readString();

      this.gender = in.readString();

      this.transaction_id = in.readLong();

      this.card_id = in.readLong();

      this.user_id = in.readString();

      this.purchase_id = in.readLong();

      this.store_id = in.readInt();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.registertime = in.readLong();
          break;

        case 1:
          this.regionid = in.readString();
          break;

        case 2:
          this.gender = in.readString();
          break;

        case 3:
          this.transaction_id = in.readLong();
          break;

        case 4:
          this.card_id = in.readLong();
          break;

        case 5:
          this.user_id = in.readString();
          break;

        case 6:
          this.purchase_id = in.readLong();
          break;

        case 7:
          this.store_id = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










